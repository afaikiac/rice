# Basic Settings
set hidden true
# set drawbox true
# curl https://raw.githubusercontent.com/gokcehan/lf/master/etc/icons.example -o ~/.config/lf/icons
set icons true
set ignorecase true
set period 1

# interpreter for shell commands
set shell bash

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Previews with ctpv
# TODO: Possible vulnerabilities in a preview parsers. Recheck!
# https://github.com/gokcehan/lf/wiki/Previews#with-stpv-and-ctpv
# paru -S ctpv-git ueberzug
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# Automatically quit server when there are no clients left connected.
set autoquit on

# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.

# cmd open ${{
#     case $(file --mime-type -Lb $f) in
#         text/*)
#             $EDITOR $fx;;
#         *) 
#             for f in $fx; do
#                 setsid $OPENER $f > /dev/null 2> /dev/null &
#             done;;
#     esac
# }}

cmd open ${{
    case $(file --mime-type -Lb $f) in
        */x-gtar|*/zip|*/x-iso9660-image|*/x-bzip2|*/x-7z-compressed|*/x-rar-compressed)
        # see https://en.wikipedia.org/wiki/List_of_archive_formats
            mntdir="$f-archivemount"
            [ ! -d "$mntdir" ] && {
                mkdir "$mntdir"
                archivemount "$f" "$mntdir"
                echo "$mntdir" >> "/tmp/__lf_archivemount_$id"
            }
            lf -remote "send $id cd \"$mntdir\""
            lf -remote "send $id reload"
            ;;
        text/*)
            $EDITOR $fx;;
        *) 
            for f in $fx; do
                setsid $OPENER $f > /dev/null 2> /dev/null &
            done;;
    esac
}}

cmd trash %{{
	# clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	# printf "%s\n\t" "$fx"
	printf "delete? [y/N] "
	read ans
	[ $ans = "y" ] && gio trash $fx
  echo
}}

cmd extract ${{
	# clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	# printf "%s\n\t" "$fx"
	printf "extract? [y/N] "
	read ans
	[ $ans = "y" ] && IFS="$(printf '\n\t')"; aunpack $fx
  echo
}}

# Bulk rename multiple files
# https://github.com/gokcehan/lf/wiki/Tips#bulk-rename-multiple-files
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd z %{{
    result="$(zoxide query --exclude "${PWD}" -- "$@")"
    lf -remote "send ${id} cd '${result}'"
}}

cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
map gs :fzf_search

cmd share ${{
  set -f
  echo "to share:"; echo -e  "$fx"
	printf "share with name: "; read name
  printf "max downloads: "; read downloads
  printf "max days: "; read days
  if [ -n "$fs" ]; then
    archive="${name}.zip"
    IFS="$(printf '\n\t')"; apack $archive $(basename -a $fx)
    wget --method PUT \
      --header="Max-Downloads: $downloads" \
      --header="Max-Days: $days" \
      --body-file="$archive" \
      "https://transfer.sh/$archive" \
      -O - -q \
    | xclip -i -selection clipboard
    rm "$archive" 
    lf -remote "send $id unselect"
  else
    wget --method PUT \
      --header="Max-Downloads: $downloads" \
      --header="Max-Days: $days" \
      --body-file="$fx" \
      "https://transfer.sh/$name" \
      -O - -q \
    | xclip -i -selection clipboard
  fi
}}

# Yank paths into your clipboard
# https://github.com/gokcehan/lf/wiki/Tips#yank-paths-into-your-clipboard
cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
cmd yank-fullpath $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard

# Toggle hidden files
# `H` for `High` by default, but it's useless
map H set hidden!

# use enter for shell commands
map <enter> shell

map d trash

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

map x cut

map c copy
map C clear


map r push :rename<enter>
map R bulk-rename

map y yank-basename
map Y yank-fullpath

map <esc> quit
# useful for lfcd shell script
push mw
map q push 'w:quit<enter>
map ZQ push 'w:quit<enter>
map Q push :quit<enter>
map ZZ push :quit<enter>
