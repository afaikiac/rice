#!/usr/bin/env bash

set -euo pipefail

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
NORMAL=$(tput sgr0)
BOLD=$(tput bold)

temp_file=$(mktemp)

cleanup() {
	if [[ -s "$temp_file" ]]; then
		temp_dir=$(<"$temp_file")
		printf "\n%s" "$temp_dir"
	fi
	rm -f "$temp_file"
	exit 0
}

get_temp_dir() {
	local temp=$(mktemp -d)
	echo "$temp" >"$temp_file"
	echo "$temp"
}

get_data_pair() {
	local count=$1
	local dir=$2
	echo "in$count (^D):"
	cat >"$dir/in$count"
	echo "out$count (^D):"
	cat >"$dir/out$count"
}

watch_directory() {
	local dir=$1
	local last_file=$(ls -1v "$dir/in"* 2>/dev/null | tail -n 1)
	local next_num
	if [ -z "$last_file" ]; then
		next_num=1
	else
		next_num=$(($(echo "$last_file" | grep -oP '\d+$') + 1))
	fi
	echo "$next_num"
}

run_executable() {
	local dir=$1
	local executable=$2
	for input_file in "$dir/in"*; do
		local actual_output=$($executable <"$input_file")
		local output_file="$dir/out${input_file##*in}"

		if [ ! -f "$output_file" ]; then
			echo "${YELLOW}${BOLD}[OUT]${NORMAL} $(basename "$input_file")"
			echo "$actual_output"
			continue
		fi

		local diff_output=$(colordiff --suppress-common-lines <(echo "$actual_output") <(cat "$output_file"))

		if [ -z "$diff_output" ]; then
			echo "${GREEN}${BOLD}[PASS]${NORMAL} $(basename "$output_file")"
		else
			echo "${RED}${BOLD}[FAIL]${NORMAL} $(basename "$output_file"):"
			echo "$diff_output"
		fi

	done
}

print_help() {
	local script_name=$(basename "$0")
	cat <<EOF
Usage: $script_name [test_directory] [executable [arg ...]]

    test_directory
        Specifies the directory containing the inX and outX files.
    
    executable
        Specifies the executable to test against the input files.
  
    If no arguments are specified, a temporary directory will be created.

Examples:
    $script_name                                    # add tests
    $script_name /tmp/tmp.PdNZp0WaM2 python task.py # run tests
    $script_name /tmp/tmp.PdNZp0WaM2                # add more tests
EOF
}

main() {
	if [[ $# -eq 0 ]]; then
		local temp_dir="$(get_temp_dir)"
		local count=1
		while true; do
			get_data_pair "$count" "$temp_dir"
			count="$((count + 1))"
		done
	elif [[ $1 = -h || $1 = --help ]]; then
		print_help
		exit 0
	elif [[ $# -eq 1 ]]; then
		if [ ! -d "$1" ]; then
			echo "Error: $dir is not a valid directory."
			exit 1
		fi

		cd "$PWD" || exit 1
		local dir="$1"
		local count="$(watch_directory "$dir")"
		while true; do
			get_data_pair "$count" "$dir"
			count="$((count + 1))"
		done
	else
		if [ ! -d "$1" ]; then
			echo "Error: $dir is not a valid directory."
			exit 1
		fi

		cd "$PWD" || exit 1
		local dir="$1" && shift 1
		local executable="$*"
		run_executable "$dir" "$executable"
	fi
}

trap 'cleanup' SIGINT
main "$@"
